@model CMCS.Models.MonthlyClaim
@{
    ViewData["Title"] = "Create Claim";
}

<style>
    /* ===== Calendar Aesthetics (no functionality changes) ===== */
    .calendar-card {
        border-radius: 1rem;
        box-shadow: 0 8px 26px rgba(0, 0, 0, .06);
        border: 1px solid rgba(0, 0, 0, .06);
        background: #fff;
    }

    .calendar-header {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: .5rem;
        margin-bottom: .5rem;
        text-align: center;
    }

    .calendar-header .weekday {
        font-weight: 600;
        font-size: .95rem;
        color: #495057;
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: .65rem;
        padding: .5rem 0;
        user-select: none;
    }

    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: .5rem;
    }

    .calendar-cell-empty {
        min-height: 88px;
        background: #f8f9fa;
        border: 1px dashed #e9ecef;
        border-radius: .75rem;
    }

    .day-cell {
        min-height: 100px;
        border-radius: .9rem !important;
        border: 1px solid #e9ecef !important;
        background: #ffffff;
        box-shadow: 0 2px 10px rgba(0, 0, 0, .03);
        transition: transform .12s ease, box-shadow .12s ease, border-color .12s ease, background-color .12s ease;
        padding: .5rem .65rem !important;
    }

    .day-cell:hover {
        transform: translateY(-1px);
        box-shadow: 0 6px 18px rgba(0, 0, 0, .06);
        border-color: #dee2e6 !important;
        background: #fdfdfd;
    }

    .day-chip {
        font-weight: 700;
        font-size: 1rem;
        line-height: 1;
        color: #212529;
        background: #eef2ff;
        border: 1px solid #e0e7ff;
        border-radius: .65rem;
        padding: .25rem .5rem;
    }

    .day-badge {
        background: #198754;
        border: 1px solid #146c43;
        font-weight: 600;
        padding: .2rem .45rem;
        border-radius: 999px;
        color: #fff;
        font-size: .7rem;
    }

    .day-time {
        font-size: .9rem;
        color: #6c757d;
        margin-top: .35rem;
        min-height: 1.25rem;
    }

    .day-cell.btn-success {
        color: #0b2e13;
        background: #e9f7ef;
        border-color: #cfe9da !important;
        box-shadow: 0 4px 16px rgba(25, 135, 84, .12);
    }

    .is-today {
        outline: 2px solid rgba(13, 110, 253, .25);
        outline-offset: 2px;
        background: linear-gradient(0deg, #f8fbff 0%, #ffffff 100%);
    }

    #entriesTable {
        border-radius: .75rem;
        overflow: hidden;
    }

    #entriesTable thead th {
        background: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
        font-weight: 600;
    }
</style>

<h2 class="mb-3">@ViewData["Title"]</h2>

<form id="claimForm" asp-controller="Claims" asp-action="Summary" method="post">
    @Html.AntiForgeryToken()

    <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

    @* Keep Id around in case of editing an existing draft *@
    <input type="hidden" asp-for="Id" />

    <div class="mb-3">
        <label asp-for="MonthKey" class="form-label"></label>
        <input asp-for="MonthKey" class="form-control" placeholder="YYYY-MM" id="monthKeyInput" />
        <span asp-validation-for="MonthKey" class="text-danger"></span>
        <div class="form-text">Change this to regenerate the calendar for that month (format: YYYY-MM).</div>
    </div>

    @* Hours computed from entries on client, re-validated on server *@
    <input type="hidden" asp-for="Hours" id="hoursInput" />
    @* Rate is CO-assigned and enforced server-side; hidden to avoid edits *@
    <input type="hidden" asp-for="Rate" />
    @* (b) Raw entries as JSON for server-side recomputation/validation (exact name required) *@
    <input type="hidden" id="entriesJson" name="entriesJson" />

    <div class="mb-3">
        <label class="form-label fw-bold">Select your work days</label>

        <div class="calendar-card p-3">
            <div class="calendar-header">
                <div class="weekday">Sun</div>
                <div class="weekday">Mon</div>
                <div class="weekday">Tue</div>
                <div class="weekday">Wed</div>
                <div class="weekday">Thu</div>
                <div class="weekday">Fri</div>
                <div class="weekday">Sat</div>
            </div>
            <div id="calendar" class="calendar-grid"></div>
        </div>

        <div class="form-text mt-2">
            Click a day to add or update your start/end time for that day. Click again to edit; use the delete button in
            the table to remove.
        </div>
    </div>

    <div class="mb-3">
        <h5 class="mb-2">Work Summary</h5>
        <div class="table-responsive">
            <table class="table table-sm table-striped align-middle" id="entriesTable">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Start</th>
                        <th>End</th>
                        <th class="text-end">Hours</th>
                        <th class="text-end"></th>
                    </tr>
                </thead>
                <tbody><!-- rows injected by JS --></tbody>
                <tfoot>
                    <tr>
                        <th colspan="3" class="text-end">Total Hours</th>
                        <th class="text-end" id="totalHoursCell">0.00</th>
                        <th></th>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>

    <p class="lead">
        <strong>Total Amount:</strong>
        R <span id="totalAmount">0.00</span>
    </p>

    <!-- Next button-->
    <div class="d-flex gap-2 mt-3">
        <button id="nextBtn" type="submit" class="btn btn-primary">Next</button>
    </div>
</form>

<!-- Modal for entering start/end times -->
<div class="modal fade" id="timeModal" tabindex="-1" aria-labelledby="timeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form class="modal-content" id="timeModalForm">
            <div class="modal-header">
                <h5 class="modal-title" id="timeModalLabel">Add Work Time</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Date</label>
                    <input class="form-control" id="modalDate" type="text" readonly />
                </div>
                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="form-label">Start time</label>
                        <input class="form-control" id="modalStart" type="time" required />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">End time</label>
                        <input class="form-control" id="modalEnd" type="time" required />
                    </div>
                </div>
                <div class="form-text mt-2">End time must be after start time.</div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-primary">Save Day</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // --- Simple calendar & entry management (no external libs) ---
        const calendarEl = document.getElementById('calendar');
        const monthKeyInput = document.getElementById('monthKeyInput');
        const entriesTableBody = document.querySelector('#entriesTable tbody');
        const totalHoursCell = document.getElementById('totalHoursCell');
        const totalAmountEl = document.getElementById('totalAmount');
        const hoursInput = document.getElementById('hoursInput');
        const entriesJsonInput = document.getElementById('entriesJson');

        // Rate comes from model (CO-assigned); server enforces anyway
        const rateFromModel = parseFloat('@(Model?.Rate ?? 0M)');

        // Modal elements
        let currentDateForModal = null;
        const timeModalEl = document.getElementById('timeModal');
        const timeModal = new bootstrap.Modal(timeModalEl);
        const modalDate = document.getElementById('modalDate');
        const modalStart = document.getElementById('modalStart');
        const modalEnd = document.getElementById('modalEnd');
        const timeModalForm = document.getElementById('timeModalForm');

        // Entries structure: { date: 'YYYY-MM-DD', start: 'HH:mm', end: 'HH:mm' }
        let entries = [];

        function ymdToDate(s) {
            const [y, m, d] = s.split('-').map(Number);
            return new Date(y, m - 1, d, 0, 0, 0, 0);
        }
        function pad(n) { return (n < 10 ? '0' : '') + n; }

        function renderCalendar() {
            const mk = (monthKeyInput.value || '').trim();
            if (!/^\d{4}-\d{2}$/.test(mk)) {
                calendarEl.innerHTML = `
                        <div class="calendar-cell-empty"></div>
                        <div class="calendar-cell-empty"></div>
                        <div class="calendar-cell-empty"></div>
                        <div class="calendar-cell-empty"></div>
                        <div class="calendar-cell-empty"></div>
                        <div class="calendar-cell-empty"></div>
                        <div class="calendar-cell-empty"></div>`;
                return;
            }
            const [year, month] = mk.split('-').map(Number);
            const first = new Date(year, month - 1, 1);
            const startDow = first.getDay();
            const nextMonthFirst = new Date(year, month, 1);
            const daysInMonth = Math.round((nextMonthFirst - first) / (1000 * 60 * 60 * 24));

            let day = 1, cells = [];
            for (let i = 0; i < startDow; i++) cells.push('');
            while (day <= daysInMonth) cells.push(String(day++));
            while (cells.length % 7 !== 0) cells.push('');

            const today = new Date();
            const todayStr = `${today.getFullYear()}-${pad(today.getMonth() + 1)}-${pad(today.getDate())}`;

            let html = '';
            for (const c of cells) {
                if (c === '') {
                    html += `<div class="calendar-cell-empty"></div>`;
                } else {
                    const dateStr = `${year}-${pad(month)}-${pad(Number(c))}`;
                    const hasEntry = entries.find(e => e.date === dateStr);
                    const isToday = dateStr === todayStr ? 'is-today' : '';
                    html += `
                            <button type="button"
                                    class="w-100 text-start day-cell ${hasEntry ? 'btn btn-success' : 'btn btn-outline-secondary'} ${isToday}"
                                    data-date="${dateStr}">
                                <div class="d-flex justify-content-between align-items-start">
                                    <span class="day-chip">${c}</span>
                                    ${hasEntry ? '<span class="day-badge">✔</span>' : ''}
                                </div>
                                <div class="day-time">${hasEntry ? (hasEntry.start + '–' + hasEntry.end) : '&nbsp;'}</div>
                            </button>`;
                }
            }
            calendarEl.innerHTML = html;

            calendarEl.querySelectorAll('.day-cell').forEach(btn => {
                btn.addEventListener('click', () => openTimeModal(btn.getAttribute('data-date')));
            });
        }

        function openTimeModal(dateStr) {
            currentDateForModal = dateStr;
            modalDate.value = dateStr;
            const existing = entries.find(e => e.date === dateStr);
            modalStart.value = existing ? existing.start : '';
            modalEnd.value = existing ? existing.end : '';
            timeModal.show();
        }

        function diffHours(startHHmm, endHHmm) {
            const [sh, sm] = startHHmm.split(':').map(Number);
            const [eh, em] = endHHmm.split(':').map(Number);
            const start = sh * 60 + sm;
            const end = eh * 60 + em;
            const minutes = end - start;
            return minutes > 0 ? (minutes / 60.0) : -1;
        }

        function removeEntry(dateStr) {
            entries = entries.filter(e => e.date !== dateStr);
            syncUi();
        }

        timeModalForm.addEventListener('submit', (ev) => {
            ev.preventDefault();
            const s = modalStart.value;
            const e = modalEnd.value;
            if (!s || !e) return;
            const hours = diffHours(s, e);
            if (hours <= 0) {
                alert('End time must be after start time.');
                return;
            }
            const existingIdx = entries.findIndex(x => x.date === currentDateForModal);
            const payload = { date: currentDateForModal, start: s, end: e };
            if (existingIdx >= 0) entries[existingIdx] = payload;
            else entries.push(payload);
            timeModal.hide();
            syncUi();
        });

        function renderEntriesTable() {
            entriesTableBody.innerHTML = '';
            const sorted = [...entries].sort((a, b) => ymdToDate(a.date) - ymdToDate(b.date));
            let total = 0;
            for (const e of sorted) {
                const h = diffHours(e.start, e.end);
                total += (h > 0 ? h : 0);
                const tr = document.createElement('tr');
                tr.innerHTML = `
                        <td>${e.date}</td>
                        <td>${e.start}</td>
                        <td>${e.end}</td>
                        <td class="text-end">${h > 0 ? h.toFixed(2) : '0.00'}</td>
                        <td class="text-end">
                            <button type="button" class="btn btn-sm btn-outline-secondary me-1" data-edit="${e.date}">Edit</button>
                            <button type="button" class="btn btn-sm btn-outline-danger" data-remove="${e.date}">Delete</button>
                        </td>`;
                entriesTableBody.appendChild(tr);
            }
            totalHoursCell.textContent = total.toFixed(2);
            hoursInput.value = total.toFixed(2);
            const amount = total * (isNaN(rateFromModel) ? 0 : rateFromModel);
            totalAmountEl.textContent = amount.toFixed(2);

            // Keep entriesJson updated for server (exact field name required)
            entriesJsonInput.value = JSON.stringify(sorted);

            entriesTableBody.querySelectorAll('button[data-edit]').forEach(b => {
                b.addEventListener('click', () => openTimeModal(b.getAttribute('data-edit')));
            });
            entriesTableBody.querySelectorAll('button[data-remove]').forEach(b => {
                b.addEventListener('click', () => removeEntry(b.getAttribute('data-remove')));
            });
        }

        function syncUi() {
            renderCalendar();
            renderEntriesTable();
        }

        monthKeyInput.addEventListener('change', () => {
            const mk = (monthKeyInput.value || '').trim();
            const [y, m] = /^\d{4}-\d{2}$/.test(mk) ? mk.split('-').map(Number) : [NaN, NaN];
            if (!isNaN(y)) {
                entries = entries.filter(e => {
                    const [ey, em] = e.date.split('-').map(Number);
                    return ey === y && em === m;
                });
            }
            syncUi();
        });

        // Initial render
        syncUi();

        // ---- Debug / diagnostics for submit flow
        (function () {
            const form = document.getElementById('claimForm');
            const btn = document.getElementById('nextBtn');
            if (!form) {
                console.warn('[Create] claimForm not found');
                return;
            }
            console.log('[Create] Ready. action=', form.getAttribute('action'), 'method=', form.getAttribute('method'));
            if (!btn) console.warn('[Create] Next button not found');

            window.addEventListener('pageshow', (e) => {
                console.log('[Create] pageshow | persisted?', e.persisted);
            });

            form.addEventListener('submit', () => {
                console.log('[Create] SUBMIT at', new Date().toISOString());
                console.log('[Create] action:', form.getAttribute('action'), '| method:', form.getAttribute('method'));
                try {
                    const fd = new FormData(form);
                    const snapshot = {};
                    for (const [k, v] of fd.entries()) snapshot[k] = v;
                    console.log('[Create] FormData snapshot:', snapshot);
                } catch (err) {
                    console.warn('[Create] Could not read FormData:', err);
                }
                const token = form.querySelector('input[name="__RequestVerificationToken"]');
                console.log('[Create] Found anti-forgery token?', !!token, token ? '(len ' + token.value.length + ')' : '');
            });
        })();
    </script>
}